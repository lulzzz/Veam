// <auto-generated />
using System;
using EMS.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EMS.Persistance.Migrations
{
    [DbContext(typeof(EmployeeContext))]
    [Migration("20200204104520_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EMS.Domain.Entities.AttendanceC", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short>("LateMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Late_Min")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte>("Ot15")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OT_15")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte>("Ot3")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OT_3")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PassCode")
                        .IsRequired()
                        .HasColumnName("Pass_Code")
                        .HasColumnType("char(1)");

                    b.Property<string>("TimeIn")
                        .IsRequired()
                        .HasColumnName("Time_In")
                        .HasMaxLength(19)
                        .IsUnicode(false);

                    b.Property<string>("TimeOut")
                        .HasColumnName("Time_Out")
                        .HasMaxLength(19)
                        .IsUnicode(false);

                    b.Property<string>("WorkDate")
                        .IsRequired()
                        .HasColumnName("Work_Date")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("WorkDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Work_Day")
                        .HasColumnType("decimal(2, 1)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("WorkShift")
                        .IsRequired()
                        .HasColumnName("Work_Shift")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "WorkDate")
                        .HasName("idx1_AttendanceC");

                    b.ToTable("AttendanceC");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeSkills", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("SkillId")
                        .HasColumnName("SkillID");

                    b.Property<int>("SkillLevel");

                    b.HasKey("EmployeeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("EmployeSkills");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("AvailableFlag")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('1')");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CardId")
                        .HasColumnName("CardID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ChangedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasColumnType("nchar(2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstNameThai")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<string>("GlobalId")
                        .IsRequired()
                        .HasColumnName("GlobalID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Hand")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("HireType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastNameThai")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("TitleThai")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("EmployeeId");

                    b.HasIndex("GlobalId")
                        .IsUnique()
                        .HasName("UQ__Employee__A50E8993D0F46EBD");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeAccount", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountID");

                    b.HasKey("EmployeeId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("EmployeeAccount");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeAddress", b =>
                {
                    b.Property<int>("EmployeeAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeAddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("EmployeeAddressId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeEducation", b =>
                {
                    b.Property<int>("EmployeeEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeEducationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("LastEducation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('1')");

                    b.Property<int>("MajorId")
                        .HasColumnName("MajorID");

                    b.HasKey("EmployeeEducationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MajorId");

                    b.ToTable("EmployeeEducation");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<byte[]>("Images");

                    b.HasKey("ImageId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeImage");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<string>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("LocationId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLocation");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeState", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("BusStationId")
                        .HasColumnName("BusStationID");

                    b.Property<DateTime>("ChangedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("JobFunctionId")
                        .HasColumnName("JobFunctionID");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<int>("LevelId")
                        .HasColumnName("LevelID");

                    b.Property<int>("PositionId")
                        .HasColumnName("PositionID");

                    b.Property<byte>("ShiftId")
                        .HasColumnName("ShiftID");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BusStationId");

                    b.HasIndex("JobFunctionId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ShiftId");

                    b.ToTable("EmployeeState");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AccountId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UQ__MasterAc__C9F28456EC943ACC");

                    b.ToTable("MasterAccount");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterAccountAuthority", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnName("AccountID");

                    b.Property<int>("AuthorityId")
                        .HasColumnName("AuthorityID");

                    b.HasKey("AccountId", "AuthorityId");

                    b.HasIndex("AuthorityId");

                    b.ToTable("MasterAccountAuthority");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterAuthority", b =>
                {
                    b.Property<int>("AuthorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthorityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AuthorityId");

                    b.ToTable("MasterAuthority");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterBusStation", b =>
                {
                    b.Property<int>("BusStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BusStationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusStationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("BusStationName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("RouteId")
                        .HasColumnName("RouteID");

                    b.Property<TimeSpan>("TimeInDay");

                    b.Property<TimeSpan>("TimeInNight");

                    b.HasKey("BusStationId");

                    b.HasIndex("RouteId");

                    b.ToTable("MasterBusStation");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DepartmentGroup")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DepartmentId");

                    b.ToTable("MasterDepartment");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterEducationDegree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DegreeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DegreeNameThai")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("DegreeId");

                    b.HasIndex("DegreeName")
                        .IsUnique()
                        .HasName("UQ_MasterEducationDegree_DegreeName");

                    b.ToTable("MasterEducationDegree");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterEducationMajor", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MajorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DegreeId")
                        .HasColumnName("DegreeID");

                    b.Property<string>("MajorNameThai")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MarjorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("MajorId");

                    b.HasIndex("DegreeId");

                    b.ToTable("MasterEducationMajor");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterJobFunction", b =>
                {
                    b.Property<int>("JobFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobFunctionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FunctionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SectionId")
                        .HasColumnName("SectionID");

                    b.HasKey("JobFunctionId");

                    b.HasIndex("SectionId");

                    b.ToTable("MasterJobFunction");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterJobPosition", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PositionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PositionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PositionId");

                    b.ToTable("MasterJobPosition");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LevelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("LevelId");

                    b.ToTable("MasterLevel");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationGroupId")
                        .HasColumnName("LocationGroupID");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LocationId");

                    b.HasIndex("LocationGroupId");

                    b.ToTable("MasterLocation");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterLocationGroup", b =>
                {
                    b.Property<int>("LocationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationGroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationGroupName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("LocationGroupId");

                    b.ToTable("MasterLocationGroup");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterRoute", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RouteID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("RouteId");

                    b.ToTable("MasterRoute");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterSection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SectionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("SectionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SectionId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MasterSection");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterShift", b =>
                {
                    b.Property<byte>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShiftID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("EndTime");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("ShiftId");

                    b.ToTable("MasterShift");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterShiftCalendar", b =>
                {
                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("date");

                    b.Property<byte>("ShiftId")
                        .HasColumnName("ShiftID");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("WorkDate");

                    b.HasIndex("ShiftId");

                    b.ToTable("MasterShiftCalendar");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterSkill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SkillID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillDescription")
                        .HasMaxLength(250);

                    b.Property<int>("SkillGroupId")
                        .HasColumnName("SkillGroupID");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SkillTypeId")
                        .HasColumnName("SkillTypeID");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillGroupId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("MasterSkill");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterSkillGroup", b =>
                {
                    b.Property<int>("SkillGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SkillGroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillGroupName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("SkillGroupId");

                    b.ToTable("MasterSkillGroup");
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterSkillType", b =>
                {
                    b.Property<int>("SkillTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SkillTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SkillTypeId");

                    b.ToTable("MasterSkillType");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeSkills", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeSkills")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeSkills_Employee_EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterSkill", "Skill")
                        .WithMany("EmployeSkills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_EmployeeSkills_MasterSkill_SkillID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeAccount", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterAccount", "Account")
                        .WithMany("EmployeeAccount")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_EmployeeUser_MasterUser_UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeAccount")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeUser_Employee_EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeAddress", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeAdress_Employee_EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeEducation", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeEducation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterEducationMajor", "Major")
                        .WithMany("EmployeeEducation")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeImage", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeImage")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeLocation", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeLocation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterLocation", "Location")
                        .WithMany("EmployeeLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeState", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterBusStation", "BusStation")
                        .WithMany("EmployeeState")
                        .HasForeignKey("BusStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithOne("EmployeeState")
                        .HasForeignKey("EMS.Domain.Entities.EmployeeState", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterJobFunction", "JobFunction")
                        .WithMany("EmployeeState")
                        .HasForeignKey("JobFunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterLevel", "Level")
                        .WithMany("EmployeeState")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterJobPosition", "Position")
                        .WithMany("EmployeeState")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterShift", "Shift")
                        .WithMany("EmployeeState")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterAccountAuthority", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterAccount", "Account")
                        .WithMany("MasterAccountAuthority")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterAuthority", "Authority")
                        .WithMany("MasterAccountAuthority")
                        .HasForeignKey("AuthorityId")
                        .HasConstraintName("FK_MasterUserAuthority_MasterAuthority_AuthorityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterBusStation", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterRoute", "Route")
                        .WithMany("MasterBusStation")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterEducationMajor", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterEducationDegree", "Degree")
                        .WithMany("MasterEducationMajor")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterJobFunction", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterSection", "Section")
                        .WithMany("MasterJobFunction")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterLocation", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterLocationGroup", "LocationGroup")
                        .WithMany("MasterLocation")
                        .HasForeignKey("LocationGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterSection", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterDepartment", "Department")
                        .WithMany("MasterSection")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterShiftCalendar", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterShift", "Shift")
                        .WithMany("MasterShiftCalendar")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("FK_WorkCalendar_MasterShift_ShiftID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.Entities.MasterSkill", b =>
                {
                    b.HasOne("EMS.Domain.Entities.MasterSkillGroup", "SkillGroup")
                        .WithMany("MasterSkill")
                        .HasForeignKey("SkillGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.Entities.MasterSkillType", "SkillType")
                        .WithMany("MasterSkill")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
